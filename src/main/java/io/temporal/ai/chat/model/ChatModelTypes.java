package io.temporal.ai.chat.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import org.springframework.ai.openai.api.OpenAiApi;

import java.time.Duration;
import java.util.List;

public class ChatModelTypes {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public record ChatModelActivityInput(
            @JsonProperty("messages") List<Message> messages,
            @JsonProperty("model_options") ModelOptions modelOptions,
            @JsonProperty("tools") List<FunctionTool> tools
    ) {
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public record ModelOptions(
                @JsonProperty("model") String model,
                @JsonProperty("frequency_penalty") Double frequencyPenalty,
                @JsonProperty("max_tokens") Integer maxTokens,
                @JsonProperty("presence_penalty") Double presencePenalty,
                @JsonProperty("stop_sequences") List<String> stopSequences,
                @JsonProperty("temperature") Double temperature,
                @JsonProperty("top_k") Integer topK,
                @JsonProperty("top_p") Double topP
        ){}

    }

    /**
     * Message comprising the conversation.
     *
     * @param rawContent The contents of the message. Can be either a {@link OpenAiApi.ChatCompletionMessage.MediaContent}
     * or a {@link String}. The response message content is always a {@link String}.
     * @param role The role of the messages author. Could be one of the {@link OpenAiApi.ChatCompletionMessage.Role}
     * types.
     * @param name An optional name for the participant. Provides the model information to
     * differentiate between participants of the same role. In case of Function calling,
     * the name is the function name that the message is responding to.
     * @param toolCallId Tool call that this message is responding to. Only applicable for
     * the {@link OpenAiApi.ChatCompletionMessage.Role#TOOL} role and null otherwise.
     * @param toolCalls The tool calls generated by the model, such as function calls.
     * Applicable only for {@link OpenAiApi.ChatCompletionMessage.Role#ASSISTANT} role and null otherwise.
     * @param refusal The refusal message by the assistant. Applicable only for
     * {@link OpenAiApi.ChatCompletionMessage.Role#ASSISTANT} role and null otherwise.
     * @param audioOutput Audio response from the model.
     * @param annotations Annotations for the message, when applicable, as when using the
     * web search tool.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public record Message(
                                        @JsonProperty("content") Object rawContent,
                                        @JsonProperty("role") Role role,
                                        @JsonProperty("name") String name,
                                        @JsonProperty("tool_call_id") String toolCallId,
                                        @JsonProperty("tool_calls") @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY) List<ToolCall> toolCalls,
                                        @JsonProperty("refusal") String refusal,
                                        @JsonProperty("audio") AudioOutput audioOutput,
                                        @JsonProperty("annotations") List<Annotation> annotations
    ) {
        public Message(Object content, Role role) {
            this(content, role, null, null, null, null, null, null);
        }

        /**
         * The relevant tool call.
         *
         * @param index The index of the tool call in the list of tool calls. Required in
         * case of streaming.
         * @param id The ID of the tool call. This ID must be referenced when you submit
         * the tool outputs in using the Submit tool outputs to run endpoint.
         * @param type The type of tool call the output is required for. For now, this is
         * always function.
         * @param function The function definition.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonIgnoreProperties(ignoreUnknown = true)
        public record ToolCall(// @formatter:off
                               @JsonProperty("index") Integer index,
                               @JsonProperty("id") String id,
                               @JsonProperty("type") String type,
                               @JsonProperty("function") ChatCompletionFunction function) { // @formatter:on

            public ToolCall(String id, String type,ChatCompletionFunction function) {
                this(null, id, type, function);
            }

        }

        /**
         * The function definition.
         *
         * @param name The name of the function.
         * @param arguments The arguments that the model expects you to pass to the
         * function.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonIgnoreProperties(ignoreUnknown = true)
        public record ChatCompletionFunction(// @formatter:off
                                             @JsonProperty("name") String name,
                                             @JsonProperty("arguments") String arguments) { // @formatter:on
        }

        /**
         * The role of the author of this message.
         */
        public enum Role {

            /**
             * System message.
             */
            @JsonProperty("system")
            SYSTEM,
            /**
             * User message.
             */
            @JsonProperty("user")
            USER,
            /**
             * Assistant message.
             */
            @JsonProperty("assistant")
            ASSISTANT,
            /**
             * Tool message.
             */
            @JsonProperty("tool")
            TOOL

        }

        /**
         * Audio response from the model.
         *
         * @param id Unique identifier for the audio response from the model.
         * @param data Audio output from the model.
         * @param expiresAt When the audio content will no longer be available on the
         * server.
         * @param transcript Transcript of the audio output from the model.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonIgnoreProperties(ignoreUnknown = true)
        public record AudioOutput(
                                  @JsonProperty("id") String id,
                                  @JsonProperty("data") String data,
                                  @JsonProperty("expires_at") Long expiresAt,
                                  @JsonProperty("transcript") String transcript
        ) {
        }

        /**
         * Represents an annotation within a message, specifically for URL citations.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public record Annotation(@JsonProperty("type") String type,
                                 @JsonProperty("url_citation") OpenAiApi.ChatCompletionMessage.Annotation.UrlCitation urlCitation) {
            /**
             * A URL citation when using web search.
             *
             * @param endIndex The index of the last character of the URL citation in the
             * message.
             * @param startIndex The index of the first character of the URL citation in
             * the message.
             * @param title The title of the web resource.
             * @param url The URL of the web resource.
             */
            @JsonInclude(JsonInclude.Include.NON_NULL)
            public record UrlCitation(@JsonProperty("end_index") Integer endIndex,
                                      @JsonProperty("start_index") Integer startIndex, @JsonProperty("title") String title,
                                      @JsonProperty("url") String url) {
            }
        }
    }

    /**
     * An array of content parts with a defined type. Each MediaContent can be of
     * either "text", "image_url", or "input_audio" type. Only one option allowed.
     *
     * @param type Content type, each can be of type text or image_url.
     * @param text The text content of the message.
     * @param imageUrl The image content of the message. You can pass multiple images
     * by adding multiple image_url content parts. Image input is only supported when
     * using the gpt-4-visual-preview model.
     * @param inputAudio Audio content part.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public record MediaContent(
                               @JsonProperty("type") String type,
                               @JsonProperty("text") String text,
                               @JsonProperty("image_url") MediaContent.ImageUrl imageUrl,
                               @JsonProperty("input_audio") MediaContent.InputAudio inputAudio) { // @formatter:on

        /**
         * Shortcut constructor for a text content.
         * @param text The text content of the message.
         */
        public MediaContent(String text) {
            this("text", text, null, null);
        }

        /**
         * Shortcut constructor for an image content.
         * @param imageUrl The image content of the message.
         */
        public MediaContent(MediaContent.ImageUrl imageUrl) {
            this("image_url", null, imageUrl, null);
        }

        /**
         * Shortcut constructor for an audio content.
         * @param inputAudio The audio content of the message.
         */
        public MediaContent(InputAudio inputAudio) {
            this("input_audio", null, null, inputAudio);
        }

        /**
         * @param data Base64 encoded audio data.
         * @param format The format of the encoded audio data. Currently supports
         * "wav" and "mp3".
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public record InputAudio(// @formatter:off
                                 @JsonProperty("data") String data,
                                 @JsonProperty("format") Format format) {

            public enum Format {
                /** MP3 audio format */
                @JsonProperty("mp3") MP3,
                /** WAV audio format */
                @JsonProperty("wav") WAV
            } // @formatter:on
        }

        /**
         * Shortcut constructor for an image content.
         *
         * @param url Either a URL of the image or the base64 encoded image data. The
         * base64 encoded image data must have a special prefix in the following
         * format: "data:{mimetype};base64,{base64-encoded-image-data}".
         * @param detail Specifies the detail level of the image.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public record ImageUrl(@JsonProperty("url") String url, @JsonProperty("detail") String detail) {

            public ImageUrl(String url) {
                this(url, null);
            }
        }
    }

    /**
     * Represents a tool the model may call. Currently, only functions are supported as a
     * tool.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class FunctionTool {

        /**
         * The type of the tool. Currently, only 'function' is supported.
         */
        @JsonProperty("type")
        private FunctionTool.Type type = Type.FUNCTION;

        /**
         * The function definition.
         */
        @JsonProperty("function")
        private FunctionTool.Function function;

        public FunctionTool() {

        }

        /**
         * Create a tool of type 'function' and the given function definition.
         * @param type the tool type
         * @param function function definition
         */
        public FunctionTool(FunctionTool.Type type, FunctionTool.Function function) {
            this.type = type;
            this.function = function;
        }

        /**
         * Create a tool of type 'function' and the given function definition.
         * @param function function definition.
         */
        public FunctionTool(Function function) {
            this(FunctionTool.Type.FUNCTION, function);
        }

        public FunctionTool.Type getType() {
            return this.type;
        }

        public FunctionTool.Function getFunction() {
            return this.function;
        }

        public void setType(FunctionTool.Type type) {
            this.type = type;
        }

        public void setFunction(FunctionTool.Function function) {
            this.function = function;
        }

        /**
         * Create a tool of type 'function' and the given function definition.
         */
        public enum Type {

            /**
             * Function tool type.
             */
            @JsonProperty("function")
            FUNCTION

        }

        /**
         * Function definition.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class Function {

            @JsonProperty("description")
            private String description;

            @JsonProperty("name")
            private String name;

            @JsonProperty("json_schema")
            private String jsonSchema;

            /**
             * NOTE: Required by Jackson, JSON deserialization!
             */
            @SuppressWarnings("unused")
            private Function() {
            }

            /**
             * Create tool function definition.
             * @param description A description of what the function does, used by the
             * model to choose when and how to call the function.
             * @param name The name of the function to be called. Must be a-z, A-Z, 0-9,
             * or contain underscores and dashes, with a maximum length of 64.
             */
            public Function(String description, String name, String jsonSchema) {
                this.description = description;
                this.name = name;
                this.jsonSchema = jsonSchema;
            }


            public String getDescription() {
                return this.description;
            }

            public String getName() {
                return this.name;
            }

            public void setDescription(String description) {
                this.description = description;
            }

            public void setName(String name) {
                this.name = name;
            }

            public String getJsonSchema() {
                return this.jsonSchema;
            }

            public void setJsonSchema(String jsonSchema) {
                this.jsonSchema = jsonSchema;
            }

        }

    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public record ChatModelActivityOutput(
            @JsonProperty("generations") List<Generation> generations,
            @JsonProperty("metadata") ChatResponseMetadata metadata
    ){
        @JsonInclude(JsonInclude.Include.NON_NULL)
        record Generation (
                @JsonProperty("message") Message message
        ){}

        @JsonInclude(JsonInclude.Include.NON_NULL)
        public record ChatResponseMetadata(
                @JsonProperty("model") String model,
                @JsonProperty("rate_limit") RateLimit rateLimit,
                @JsonProperty("usage") Usage usage
        ){
            @JsonInclude(JsonInclude.Include.NON_NULL)
            public record RateLimit(
                    @JsonProperty("request_limit") Long requestLimit,
                    @JsonProperty("request_remaining") Long requestRemaining,
                    @JsonProperty("request_reset") Duration requestReset,
                    @JsonProperty("token_limit") Long tokenLimit,
                    @JsonProperty("token_remaining") Long tokenRemaining,
                    @JsonProperty("token_reset") Duration tokenReset
            ){}

            @JsonInclude(JsonInclude.Include.NON_NULL)
            public record Usage(
                    @JsonProperty("prompt_tokens") Integer promptTokens,
                    @JsonProperty("completion_tokens") Integer completionTokens,
                    @JsonProperty("total_tokens") Integer totalTokens
            ){}
        }
    }

}
