package io.temporal.ai.chat.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.time.Duration;
import java.util.List;

/**
 * Types used for serializing and deserializing chat model activity requests and responses.
 */
public class ChatModelTypes {
    /**
     * Input to the chat model activity.
     *
     * @param messages      The list of messages comprising the conversation.
     * @param modelOptions  Options for the chat model, such as temperature, max tokens, etc.
     * @param tools         The list of tools the model may call, such as functions.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public record ChatModelActivityInput(
            @JsonProperty("messages") List<Message> messages,
            @JsonProperty("model_options") ChatModelTypes.ModelOptions modelOptions,
            @JsonProperty("tools") List<FunctionTool> tools
    ) {}

    /**
     * Message comprising the conversation.
     *
     * @param rawContent    The contents of the message. Can be either a {@link MediaContent}
     *                      or a {@link String}. The response message content is always a {@link String}.
     * @param role          The role of the messages author. Could be one of the {@link Role}
     *                      types.
     * @param name          An optional name for the participant. Provides the model information to
     *                      differentiate between participants of the same role. In case of Function calling,
     *                      the name is the function name that the message is responding to.
     * @param toolCallId    Tool call that this message is responding to. Only applicable for
     *                      the {@link Role#TOOL} role and null otherwise.
     * @param toolCalls     The tool calls generated by the model, such as function calls.
     *                      Applicable only for {@link Role#ASSISTANT} role and null otherwise.
     * @param mediaContents
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public record Message(
                                        @JsonProperty("content") Object rawContent,
                                        @JsonProperty("role") Role role,
                                        @JsonProperty("name") String name,
                                        @JsonProperty("tool_call_id") String toolCallId,
                                        @JsonProperty("tool_calls") @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY) List<ToolCall> toolCalls,
                                        @JsonProperty("media") @JsonFormat(with = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY) List<MediaContent> mediaContents) {
        public Message(Object content, Role role) {
            this(content, role, null, null, null, null);
        }

        public Message(Object content,  List<MediaContent> mediaContents, Role role) {
            this(content, role, null, null, null, mediaContents);
        }

        /**
         * The relevant tool call.
         *
         * @param index The index of the tool call in the list of tool calls. Required in
         * case of streaming.
         * @param id The ID of the tool call. This ID must be referenced when you submit
         * the tool outputs in using the Submit tool outputs to run endpoint.
         * @param type The type of tool call the output is required for. For now, this is
         * always function.
         * @param function The function definition.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonIgnoreProperties(ignoreUnknown = true)
        public record ToolCall(
                               @JsonProperty("index") Integer index,
                               @JsonProperty("id") String id,
                               @JsonProperty("type") String type,
                               @JsonProperty("function") ChatCompletionFunction function) { // @formatter:on

            public ToolCall(String id, String type,ChatCompletionFunction function) {
                this(null, id, type, function);
            }

        }

        /**
         * The function definition.
         *
         * @param name The name of the function.
         * @param arguments The arguments that the model expects you to pass to the
         * function.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonIgnoreProperties(ignoreUnknown = true)
        public record ChatCompletionFunction(
                                             @JsonProperty("name") String name,
                                             @JsonProperty("arguments") String arguments) { // @formatter:on
        }

        /**
         * The role of the author of this message.
         */
        public enum Role {

            /**
             * System message.
             */
            @JsonProperty("system")
            SYSTEM,
            /**
             * User message.
             */
            @JsonProperty("user")
            USER,
            /**
             * Assistant message.
             */
            @JsonProperty("assistant")
            ASSISTANT,
            /**
             * Tool message.
             */
            @JsonProperty("tool")
            TOOL

        }
    }

    /**
     * Represents media content within a message, which can be either a URI or raw data.
     *
     * @param mimeType The MIME type of the media content (e.g., "image/png", "audio/mpeg").
     * @param uri An optional URI pointing to the media content. This can be used when
     * the content is hosted externally.
     * @param data An optional byte array containing the raw media data. This can be used
     * when the content is included directly in the message.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public record MediaContent(
                               @JsonProperty("mime_type") String mimeType,
                               @JsonProperty("uri") String uri,
                               @JsonProperty("data") byte[] data) {
        public MediaContent( String mimeType, String uri) {
            this(mimeType, uri, null);
        }

        public MediaContent(String mimeType, byte[] data) {
            this(mimeType, null, data);
        }
    }

    /**
     * Represents a tool the model may call. Currently, only functions are supported as a
     * tool.
     */
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public static class FunctionTool {

        /**
         * The type of the tool. Currently, only 'function' is supported.
         */
        @JsonProperty("type")
        private FunctionTool.Type type = Type.FUNCTION;

        /**
         * The function definition.
         */
        @JsonProperty("function")
        private FunctionTool.Function function;

        public FunctionTool() {

        }

        /**
         * Create a tool of type 'function' and the given function definition.
         * @param type the tool type
         * @param function function definition
         */
        public FunctionTool(FunctionTool.Type type, FunctionTool.Function function) {
            this.type = type;
            this.function = function;
        }

        /**
         * Create a tool of type 'function' and the given function definition.
         * @param function function definition.
         */
        public FunctionTool(Function function) {
            this(FunctionTool.Type.FUNCTION, function);
        }

        public FunctionTool.Type getType() {
            return this.type;
        }

        public FunctionTool.Function getFunction() {
            return this.function;
        }

        public void setType(FunctionTool.Type type) {
            this.type = type;
        }

        public void setFunction(FunctionTool.Function function) {
            this.function = function;
        }

        /**
         * Create a tool of type 'function' and the given function definition.
         */
        public enum Type {

            /**
             * Function tool type.
             */
            @JsonProperty("function")
            FUNCTION

        }

        /**
         * Function definition.
         */
        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonIgnoreProperties(ignoreUnknown = true)
        public static class Function {

            @JsonProperty("description")
            private String description;

            @JsonProperty("name")
            private String name;

            @JsonProperty("json_schema")
            private String jsonSchema;

            /**
             * Default constructor for deserialization.
             */
            @SuppressWarnings("unused")
            private Function() {
            }

            /**
             * Create tool function definition.
             * @param description A description of what the function does, used by the
             * model to choose when and how to call the function.
             * @param name The name of the function to be called. Must be a-z, A-Z, 0-9,
             * or contain underscores and dashes, with a maximum length of 64.
             */
            public Function(String description, String name, String jsonSchema) {
                this.description = description;
                this.name = name;
                this.jsonSchema = jsonSchema;
            }


            public String getDescription() {
                return this.description;
            }

            public String getName() {
                return this.name;
            }

            public void setDescription(String description) {
                this.description = description;
            }

            public void setName(String name) {
                this.name = name;
            }

            public String getJsonSchema() {
                return this.jsonSchema;
            }

            public void setJsonSchema(String jsonSchema) {
                this.jsonSchema = jsonSchema;
            }

        }

    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public record ChatModelActivityOutput(
            @JsonProperty("generations") List<Generation> generations,
            @JsonProperty("metadata") ChatResponseMetadata metadata
    ){
        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonIgnoreProperties(ignoreUnknown = true)
        record Generation (
                @JsonProperty("message") Message message
        ){}

        @JsonInclude(JsonInclude.Include.NON_NULL)
        @JsonIgnoreProperties(ignoreUnknown = true)
        public record ChatResponseMetadata(
                @JsonProperty("model") String model,
                @JsonProperty("rate_limit") RateLimit rateLimit,
                @JsonProperty("usage") Usage usage
        ){
            @JsonInclude(JsonInclude.Include.NON_NULL)
            @JsonIgnoreProperties(ignoreUnknown = true)
            public record RateLimit(
                    @JsonProperty("request_limit") Long requestLimit,
                    @JsonProperty("request_remaining") Long requestRemaining,
                    @JsonProperty("request_reset") Duration requestReset,
                    @JsonProperty("token_limit") Long tokenLimit,
                    @JsonProperty("token_remaining") Long tokenRemaining,
                    @JsonProperty("token_reset") Duration tokenReset
            ){}

            @JsonInclude(JsonInclude.Include.NON_NULL)
            @JsonIgnoreProperties(ignoreUnknown = true)
            public record Usage(
                    @JsonProperty("prompt_tokens") Integer promptTokens,
                    @JsonProperty("completion_tokens") Integer completionTokens,
                    @JsonProperty("total_tokens") Integer totalTokens
            ){}
        }
    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonIgnoreProperties(ignoreUnknown = true)
    public record ModelOptions(
            @JsonProperty("model") String model,
            @JsonProperty("frequency_penalty") Double frequencyPenalty,
            @JsonProperty("max_tokens") Integer maxTokens,
            @JsonProperty("presence_penalty") Double presencePenalty,
            @JsonProperty("stop_sequences") List<String> stopSequences,
            @JsonProperty("temperature") Double temperature,
            @JsonProperty("top_k") Integer topK,
            @JsonProperty("top_p") Double topP
    ){}
}
